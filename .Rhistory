estMu <- svymean(~ y, design=plano.ae)
estMu
confint(estMu)
r <- svyratio(numerator = ~ y, denominator = ~ x, design=plano.ae)
r
confint(r)
estMuR <- svyratio(numerator = ~ I(y*muX), denominator = ~ x, plano.ae)
estMuR
confint(estMuR)
estTauR <- svyratio(numerator = ~ I(y*tauX), denominator = ~ x, plano.ae)
estTauR
confint(estTauR)
View(AmostraAAS)
View(AmostraAE)
devtools::install_github("hrbrmstr/omdbapi")
devtools::install_github("hrbrmstr/omdbapi")
library(omdbapi)
library(rvest)
library(magrittr)
library(ggplot2movies)
filmesggplot2 <- data.frame(movies)
filmesggplot2 <- subset(filmesggplot2, filmesggplot2$Short==0)
particulas <- c(", The", ", A", ", An", ", El", ", Les", ", Los", ", Las", ", Un", ", Uno", ", Una", ", Le", ", La", ", O", ", Der", ", Die", ", De", ", Das", ", Den")
for (i in 1:nrow(movies)) {
for (j in 1:length(particulas)) {
if (grepl(particulas[j], filmesggplot2$title[i])) {
filmesggplot2$title[i] <- paste(gsub(", ", "", particulas[j]), gsub(particulas[j], "", filmesggplot2$title[i]))
}
if (grepl(", L'", filmesggplot2$title[i])) {
filmesggplot2$title[i] <- paste0("L'", gsub(", L'", "", filmesggplot2$title[i]))
}
}
}
rownames(filmesggplot2) <- 1:nrow(filmesggplot2)
filmesIMDB <- data.frame()
filmeBudget <- c()
filmeWWGross <- c()
filmeDomGross <- c()
k <- 0
for (j in 1:1000) {
k <- k+1
tryCatch({
filme <- cbind(find_by_title(filmesggplot2$title[j]),k)
filmesIMDB <- rbind(filmesIMDB, filme)
filmeHTML <- read_html(paste0("http://www.imdb.com/title/",filmesIMDB$imdbID[nrow(filmesIMDB)]))
filmeHTML2 <- read_html(paste0("http://www.imdb.com/title/",filmesIMDB$imdbID[nrow(filmesIMDB)],"/business"))
grossSTR <- as.character(html_text(html_node(filmeHTML2,paste0('#tn15content'))))
grossSTR2 <- strsplit(grossSTR,'\\$\\€|\\$|\\€')
grossSTR2 <- unlist(grossSTR2)
if (length(grossSTR2[grep("^\n \n\nBudget\n$",grossSTR2)])>0) {
filmeBudget[k] <- strsplit(grossSTR2[grep("Budget",grossSTR2)+1][1]," ")[[1]][1]
} else {
filmeBudget[k] <- NA
}
if (length(grossSTR2[grep("Worldwide",grossSTR2)])>0) {
filmeWWGross[k] <- strsplit(grossSTR2[grep("Worldwide",grossSTR2)][1]," ")[[1]][1]
} else {
filmeWWGross[k] <- NA
}
if (length(grossSTR2[grep("\\(USA)",grossSTR2)])>0) {
trueFalse <- grep("USA",grossSTR2)>grep("Gross",grossSTR2)[1]
filmeDomGross[k] <- strsplit(grossSTR2[grep("USA",grossSTR2)][min(which( trueFalse == TRUE))]," ")[[1]][1]
} else {
filmeDomGross[k] <- NA
}
},error=function(e) print(paste("Erro",j)))
}
library(magrittr)
library(httr)
library(XML)
library(rvest)
url <-"https://grade.daconline.unicamp.br/visoes/VisaoLogin.php"
pgsession <- html_session(url)
pgform    <- html_form(pgsession)[[1]]
filled_form <- set_values(pgform,
"ra" = "171189",
"senha" = "juju1997")
teste <- submit_form(pgsession,filled_form,'OK')
memberlist <- jump_to(pgsession, paste0("https://grade.daconline.unicamp.br/visoes/Oferecimento.php?id=205784#link_lista"))
page <- read_html(memberlist)
obsDisciplina <- html_node(page,paste0('#lista_alunos'))
obsDisciplina
memberlist
url
url2 <- "https://grade.daconline.unicamp.br/visoes/Oferecimento.php?id=205784#link_lista"
html_session(url2)
pgform
url <-"https://grade.daconline.unicamp.br/visoes/VisaoLogin.php"
pgsession <- html_session(url)
pgform    <- html_form(pgsession)[[1]]
filled_form <- set_values(pgform,
"ra" = "171189",
"senha" = "juju1997")
teste <- submit_form(pgsession,filled_form,'OK')
memberlist <- jump_to(pgsession, paste0("https://grade.daconline.unicamp.br/visoes/Oferecimento.php?id=205784#link_lista"))
html_session(url2)
pgsession
pgsession2 <- html_session(url2)
html_form(pgsession2)
url <-"https://grade.daconline.unicamp.br/visoes/VisaoLogin.php"
pgsession <- html_session(url)
pgform    <- html_form(pgsession)[[1]]
filled_form <- set_values(pgform,
"ra" = "171189",
"senha" = "juju1997")
teste <- submit_form(pgsession,filled_form,'OK')
memberlist <- jump_to(pgsession, paste0("https://grade.daconline.unicamp.br/visoes/Oferecimento.php?id=205784#link_lista"))
options(httr_oauth_cache = TRUE)
page <- read_html(memberlist)
obsDisciplina <- html_node(page,paste0('#lista_alunos'))
obsDisciplina
obsDisciplina <- html_node2(page,paste0('#lista_alunos'))
obsDisciplina <- html_nodes(page,paste0('#lista_alunos'))
obsDisciplina
obsDisciplina <- html_nodes(page,xpath = '//*[@id="content_bg"]')
obsDisciplina
obsDisciplina <- html_nodes(page,xpath = '//*[@id="content_bg"]')
obsDisciplina
obsDisciplina <- html_node(page,xpath = '//*[@id="content_bg"]')
obsDisciplina
obsDisciplina[1]
obsDisciplina
obsDisciplina$node
html_text(obsDisciplina)
as.character(html_text(obsDisciplina))
test <- as.character(html_text(obsDisciplina))
test
grepl("RA",test)
grepl("tipo",test)
grepl("RA:",test)
grepl("paginacao",test)
obsDisciplina %>% html_node('lista_alunos')
obsDisciplina %>% html_node('#lista_alunos')
url <-"https://grade.daconline.unicamp.br/visoes/VisaoLogin.php"
pgsession <- html_session(url)
pgform    <- html_form(pgsession)[[1]]
filled_form <- set_values(pgform,
"ra" = "171189",
"senha" = "juju1997")
teste <- submit_form(pgsession,filled_form,'OK')
memberlist <- jump_to(pgsession, paste0("https://grade.daconline.unicamp.br/visoes/Oferecimento.php?id=205784#lista_alunos"))
page <- read_html(memberlist)
obsDisciplina <- html_node(page,paste0('#lista_alunos'))
html_text(obsDisciplina)
install.packages("RSelenium")
library(RSelenium)
rD <- rsDriver(browser = "phantomjs", verbose = FALSE)
rD <- rsDriver(browser = "phantomjs", verbose = FALSE)
rD <- rsDriver(browser = "phantomjs", verbose = FALSE)
checkForServer()
startServer()
RSelenium::rsDriver()
checkForServer()
rD <- rsDriver(browser = "phantomjs", verbose = FALSE)
rD
remDr <- rD$client
remDr$setImplicitWaitTimeout(1000)
appurl <- "https://grade.daconline.unicamp.br/visoes/Oferecimento.php?id=205784#lista_alunos"
remDr$navigate(appURL)
remDr$navigate(appurl)
remDr$open()
checkForServer()
rsDriver()
Sys.sleep(10)   # Been testing with 10
remDr$executeScript()
library('rvest')
imdbID <- c()
for (i in 1:100) {
print(i)
url <- paste0('http://www.imdb.com/search/title?count=100&release_date=1900,2017&title_type=feature&view=advanced&page=',i,'&ref_=adv_nxt')
webpage <- read_html(url)
data_html <- html_nodes(webpage,'.lister-item-header a')
imdbID_data <- data_html %>% html_attr('href')
imdbID_data <- unlist(strsplit(imdbID_data, "/"))
imdbID <- append(imdbID,imdbID_data[grep('^tt', imdbID_data)])
}
url <- paste0('http://www.imdb.com/search/title?count=100&release_date=1900,2017&title_type=feature&view=advanced&page=',1,'&ref_=adv_nxt')
webpage <- read_html(url)
data_html <- html_nodes(webpage,'.lister-item-header a')
imdbID_data <- data_html %>% html_attr('href')
imdbID_data <- unlist(strsplit(imdbID_data, "/"))
imdbID_data[grep('^tt', imdbID_data)]
imdbID_data
x <- c(53,58,18,39,51,34,34,52,53,68)
y <- c(64,69,41,57,63,61,52,75,69,80)
varx <- var(x)
vary <- var(y)
b <- 0.72379
sxy <- b*var(x)
vary-2*b*sxy+(b^2*varx)
16.81692*6/70
# Valores ajustados e residuos
# =============================
ajust = fitted(v) # valores ajustados
e = residuals(v)  # Residuos
w = cbind(bateria,fitted(v),e)
# Diagnostico
# ============
qqnorm(e,main="")
qqline(e)
plot(ajust,e,xlab="Ajustados",ylab="Residuos",pch=20)
abline(h=0)
# residuos vs fatores
mat.1 = c(rep(1,12),rep(2,12),rep(3,12))
temp.1 = rep(c(rep(1,4),rep(2,4),rep(3,4)),3)
aux = data.frame(mat.1,temp.1,y,ajust,e)
plot(aux$mat.1,aux$e,xlab="Material",ylab="Residuos",pch=20)
plot(aux$temp.1,aux$e,xlab="Temperatura",ylab="Residuos",pch=20)
# ###################################################################
#
# 2 Fatores com replicacao
#
# ####################################################################
#
# ####################################################################
# Exemplo 1
# Dados de baterias (Montgomery)
# #####################################################################
# Dados
# ======
mat = as.factor(c(rep("A",12),rep("B",12),rep("C",12)))
temp = as.factor(rep(c(rep("T1",4),rep("T2",4),rep("T3",4)),3))
y = c(130,155,74,180,34,40,80,75, 20,70,82,58,
150,188,159,126,136,122,106,115,25,70,58,45,
138,110,168,160, 174,120,150,139, 96,104,82,60)
bateria = data.frame(mat,temp,y)
# Analise Exploratoria
# =====================
library(ggplot2)
# faraway
ggplot(bateria, aes(x=temp,y=y,shape=mat))+geom_point()+stat_summary(fun.y="mean",geom="line",aes(group=mat,linetype=mat))+theme(legend.position = "top", legend.direction = "horizontal")
ggplot(bateria, aes(x=mat,y=y,shape=temp))+geom_point()+stat_summary(fun.y="mean",geom="line",aes(group=temp,linetype=temp))+theme(legend.position = "top", legend.direction = "horizontal")
# ANOVA do modelo com interacao
# ==============================
v = lm(y ~ mat*temp,bateria)
anova(v)
# Valores ajustados e residuos
# =============================
ajust = fitted(v) # valores ajustados
e = residuals(v)  # Residuos
w = cbind(bateria,fitted(v),e)
# Diagnostico
# ============
qqnorm(e,main="")
qqline(e)
plot(ajust,e,xlab="Ajustados",ylab="Residuos",pch=20)
abline(h=0)
# residuos vs fatores
mat.1 = c(rep(1,12),rep(2,12),rep(3,12))
temp.1 = rep(c(rep(1,4),rep(2,4),rep(3,4)),3)
aux = data.frame(mat.1,temp.1,y,ajust,e)
plot(aux$mat.1,aux$e,xlab="Material",ylab="Residuos",pch=20)
plot(aux$temp.1,aux$e,xlab="Temperatura",ylab="Residuos",pch=20)
View(bateria)
ggplot(bateria, aes(x=temp,y=y,shape=mat))+geom_point()+stat_summary(fun.y="mean",geom="line",aes(group=mat,linetype=mat))+theme(legend.position = "top", legend.direction = "horizontal")
ggplot(bateria, aes(x=mat,y=y,shape=temp))+geom_point()+stat_summary(fun.y="mean",geom="line",aes(group=temp,linetype=temp))+theme(legend.position = "top", legend.direction = "horizontal")
v = lm(y ~ mat*temp,bateria)
v
anova(v)
View(w)
plot(ajust,e,xlab="Ajustados",ylab="Residuos",pch=20)
qqnorm(e,main="")
qqline(e)
plot(ajust,e,xlab="Ajustados",ylab="Residuos",pch=20)
abline(h=0)
mat.1 = c(rep(1,12),rep(2,12),rep(3,12))
temp.1 = rep(c(rep(1,4),rep(2,4),rep(3,4)),3)
aux = data.frame(mat.1,temp.1,y,ajust,e)
plot(aux$mat.1,aux$e,xlab="Material",ylab="Residuos",pch=20)
plot(aux$temp.1,aux$e,xlab="Temperatura",ylab="Residuos",pch=20)
View(aux)
View(bateria)
plot(aux$mat.1,aux$e,xlab="Material",ylab="Residuos",pch=20)
plot(aux$temp.1,aux$e,xlab="Temperatura",ylab="Residuos",pch=20)
str(aux$mat.1)
plot(aux$mat.1,aux$e,xlab="Material",ylab="Residuos",pch=20)
qqnorm(e,main="")
qqline(e)
shapiro.test(e)
anova(v)
ggplot(bateria, aes(x=temp,y=y,shape=mat))+geom_point()+stat_summary(fun.y="mean",geom="line",aes(group=mat,linetype=mat))+theme(legend.position = "top", legend.direction = "horizontal")
View(bateria)
ggplot(bateria, aes(x=temp,y=y,shape=mat))+geom_point()+stat_summary(fun.y="mean",geom="line",aes(group=mat,linetype=mat))+theme(legend.position = "top", legend.direction = "horizontal")
ggplot(bateria, aes(x=mat,y=y,shape=temp))+geom_point()+stat_summary(fun.y="mean",geom="line",aes(group=temp,linetype=temp))+theme(legend.position = "top", legend.direction = "horizontal")
source('~/.active-rstudio-document', echo=TRUE)
library(shinydashboard)
install.packages('shinydashboard')
library(shinydashboard)
m <- leaflet()
m <- addTieles(m)
m <- addTiles(m)
install.packages(`ggmap`)
install.packages(ggmap)
?geocode
install.packages('ggmap')
library(ggmap)
m
casa_da_ju <- geocode('Rua Julio Pataro, 437', output = c('latlon'))
View(casa_da_ju)
m <- addMarkers(m, lat = casa_da_ju[1,2], lng = casa_da_ju[1,1])
m
?addMarkers
m <- leaflet %>% addTiles()
getw
getwd
getwd()
getwd()
library(shiny); runApp('HackEMTU_2018/minoruuu.R')
install.packages('wordcloud')
library(wordcloud)
library(tm)
library(SnowballC)
ui <- fluidPage(
headerPanel('HackEMTU 2018'),
tabsetPanel(
tabPanel('Usuario',
sidebarLayout(
sidebarPanel(
h5(HTML('<b>Avalie aqui:</b>')),
actionButton('bom', NULL, icon = icon('thumbs-up', class = NULL, lib = "font-awesome"), 385),
actionButton('ruim', NULL, icon = icon('thumbs-down', class = NULL, lib = "font-awesome"), 385),
textInput('rec', 'Descrição:', width = '600px'  ),
actionButton('walk', 'Atualizar mapa', width = 385),
fileInput("img", "Seleciona a sua imagem", multiple = TRUE, accept = ".jpg")
),
mainPanel(
leafletOutput('map')
)
)
),
tabPanel('EMTU',
fluidRow(
column(4,
h4('Wordcloud dos comentários'),
plotOutput('wordcloud')
),
column(4,
h4('Notas por tempo'),
textOutput('date'),
plotlyOutput('plotly', width = '400px'),
h4('Último Tweet'),
textOutput('tweet'),
textOutput('nota')
),
column(4,
h4('Imagem enviada pelo usuario classificada'),
imageOutput("image")
)
)
)
)
)
server <- function(input, output) {
cloud <- NULL
plotly_data <- isolate(data.frame('time' = 1, 'n' = 1, 'm' = 1, 'o' = 1))
plotly_data <- isolate(plotly_data[-1, ])
observeEvent(input$walk, {
system('python3 run_sent.py')
sentimentos <- read_csv2('sentimentos.csv')
output$tweet <- renderText(sentimentos$texto[nrow(sentimentos)])
output$nota <- renderText(paste('Polaridade:', as.character(sentimentos$nota[nrow(sentimentos)])))
ruim <- -input$ruim
nota <- ruim + input$bom
if(!is.na(sentimentos$nota)) nota <- nota + sum(as.numeric(sentimentos$nota))
if(nota == 0){
busIcon <- awesomeIcons(icon = 'ios-clos',
iconColor = 'black',
library = 'ion',
markerColor = 'blue')
}
if(nota < 0) {
busIcon <- awesomeIcons(icon = 'ios-clos',
iconColor = 'black',
library = 'ion',
markerColor = 'red')
}
if(nota > 0){
busIcon <- awesomeIcons(icon = 'ios-clos',
iconColor = 'black',
library = 'ion',
markerColor = 'green')
}
system('python3 SMTU.py')
coord <- read_csv(file = 'live_pos.csv')
m <- leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng = coord$lng[1],
lat = coord$lat[1],
icon = busIcon)
output$map <- renderLeaflet(m)
if(input$rec != ''){
cloud <<- append(cloud, input$rec)
}
cloud <<- append(cloud, sentimentos$texto)
auxCorpus <- Corpus(VectorSource(cloud))
auxCorpus <- tm_map(auxCorpus, removePunctuation)
auxCorpus <- tm_map(auxCorpus, removeWords, stopwords('pt'))
auxCorpus <- tm_map(auxCorpus, removeWords, c('onibus', 'ônibus', 'Ônibus', 'emtu'))
auxCorpus <- tm_map(auxCorpus, stemDocument)
output$wordcloud <- renderPlot({
wordcloud(auxCorpus, max.words=50, colors = c("blue", "red"), min.freq = 1)
})
output$date <- renderText(paste('Data:',
paste(day(Sys.time()),
month(Sys.time()),
year(Sys.time()),
sep = '/'),
'Hora:',
hour(Sys.time())))
plotly_data <<- as.data.frame(rbind(plotly_data, c(minute(Sys.time()), input$ruim, input$bom, nota)))
colnames(plotly_data) <- c('time', 'nota_ruim', 'nota_boa', 'total')
output$plotly <- renderPlotly({
plotly_data %>% ggplot(aes(x = time)) +
geom_line(aes(y = nota_ruim), color = 'red') +
geom_line(aes(y = nota_boa), color = 'green') +
geom_line(aes(y = total), color = 'blue') +
labs(x = 'Tempo', y = 'Nota', title = 'Notas por minuto')
})
})
output$image <- renderImage({
req(input$img)
setwd("./darknet")
system(paste('./darknet detect cfg/yolov3.cfg yolov3.weights', input$img$datapath))
setwd("..")
list(src = "darknet/predictions.png", width = 380)
})
}
shinyApp(ui, server)
urll <- 'http://www.amazon.com/Key-Industries-Washed-Denim-Sleeve/product-reviews/B009URT88Y/ref=dp_top_cm_cr_acr_txt?showViewpoints=1'
library(XML)
doc <- htmlParse(urll)
xpathSApply(doc,'//div[@class="reviewText"]',xmlValue)
library(readr)
library(lubridate)
library(geosphere)
setwd("/Users/julianadaikawa/Downloads/all/")
train = read_csv("train.zip")
test = read_csv("test.zip")
train$Month <- month(train$pickup_datetime)
train$Day <- day(train$pickup_datetime)
train$Hour <- hour(train$pickup_datetime)
train$Minute <- minute(train$pickup_datetime)
train$Weekday <- weekdays(train$pickup_datetime)
# Distance <- distm(train[,c("pickup_longitude", "pickup_latitude")], train[,c("dropoff_longitude", "dropoff_latitude")], fun = distHaversine)
# Distance <- as.matrix(Distance)
# train$Distance <- Distance[row(Distance) == col(Distance)] # aborta sessão R
for(i in 1:nrow(train)) {
print(i)
train$Distance[i] <- distm(train[i,c("pickup_longitude", "pickup_latitude")], train[i,c("dropoff_longitude", "dropoff_latitude")], fun = distHaversine)
}
head(train)
for(i in 1:nrow(train)) {
print(i)
train$Distance[i] <- distm(train[i,c("pickup_longitude", "pickup_latitude")], train[i,c("dropoff_longitude", "dropoff_latitude")], fun = distHaversine)
}
head(train)
for(i in 1:nrow(train)) {
print(i)
train$Distance[i] <- distm(train[i,c("pickup_longitude", "pickup_latitude")], train[i,c("dropoff_longitude", "dropoff_latitude")], fun = distHaversine)
}
sum(is.na(train$Distance))
train$Distance[10000000]
train$Distance[100000]
train$Distance[1000000]
train$Distance[10000000]
train$Distance[4000000]
train$Distance[1458644]
tail(train)
tail(train$Distance)
distance <- train$Distance
save(distance, file = "distances_ate_122428")
rm(distance)
load("distances_ate_122428")
getwd()
setwd("/Users/julianadaikawa/Desktop/Taxi-Kaeggle/")
save(distance, file = "distances_ate_122428")
getwd()
library(readr)
library(lubridate)
library(geosphere)
setwd("/Users/julianadaikawa/Downloads/all/")
train = read_csv("train.zip")
test = read_csv("test.zip")
train = read_csv("train.zip")
test = read_csv("test.zip")
train = read_csv("train.zip")
test = read_csv("test.zip")
train$Month <- month(train$pickup_datetime)
train$Day <- day(train$pickup_datetime)
train$Hour <- hour(train$pickup_datetime)
train$Minute <- minute(train$pickup_datetime)
train$Weekday <- weekdays(train$pickup_datetime)
install.packages("fields")
library(fields)
rdist(train[1,c("pickup_longitude", "pickup_latitude")], train[1,c("dropoff_longitude", "dropoff_latitude")])
rdist(train[c(1,2),c("pickup_longitude", "pickup_latitude")], train[c(1,2),c("dropoff_longitude", "dropoff_latitude")])
distm(train[c(1,2),c("pickup_longitude", "pickup_latitude")], train[c(1,2),c("dropoff_longitude", "dropoff_latitude")])
rdist(train[c(1,2,3,4),c("pickup_longitude", "pickup_latitude")], train[c(1,2,3,4),c("dropoff_longitude", "dropoff_latitude")])
distm(train[c(1,2,3,4),c("pickup_longitude", "pickup_latitude")], train[c(1,2,3,4),c("dropoff_longitude", "dropoff_latitude")])
for(i in 1:nrow(train)) {
print(i)
train$Distance[i] <- rdist(train[i,c("pickup_longitude", "pickup_latitude")], train[i,c("dropoff_longitude", "dropoff_latitude")])
}
getwd()
load("train")
load("test")
head(train)
train$Distance[1458644]
train$Distance[1458643]
head(test)
test$Distance[625134]
test$Distance[625133]
