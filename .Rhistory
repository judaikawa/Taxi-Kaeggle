m <- addMarkers(m, lat = casa_da_ju[1,2], lng = casa_da_ju[1,1])
m
?addMarkers
m <- leaflet %>% addTiles()
getw
getwd
getwd()
getwd()
library(shiny); runApp('HackEMTU_2018/minoruuu.R')
install.packages('wordcloud')
library(wordcloud)
library(tm)
library(SnowballC)
ui <- fluidPage(
headerPanel('HackEMTU 2018'),
tabsetPanel(
tabPanel('Usuario',
sidebarLayout(
sidebarPanel(
h5(HTML('<b>Avalie aqui:</b>')),
actionButton('bom', NULL, icon = icon('thumbs-up', class = NULL, lib = "font-awesome"), 385),
actionButton('ruim', NULL, icon = icon('thumbs-down', class = NULL, lib = "font-awesome"), 385),
textInput('rec', 'Descrição:', width = '600px'  ),
actionButton('walk', 'Atualizar mapa', width = 385),
fileInput("img", "Seleciona a sua imagem", multiple = TRUE, accept = ".jpg")
),
mainPanel(
leafletOutput('map')
)
)
),
tabPanel('EMTU',
fluidRow(
column(4,
h4('Wordcloud dos comentários'),
plotOutput('wordcloud')
),
column(4,
h4('Notas por tempo'),
textOutput('date'),
plotlyOutput('plotly', width = '400px'),
h4('Último Tweet'),
textOutput('tweet'),
textOutput('nota')
),
column(4,
h4('Imagem enviada pelo usuario classificada'),
imageOutput("image")
)
)
)
)
)
server <- function(input, output) {
cloud <- NULL
plotly_data <- isolate(data.frame('time' = 1, 'n' = 1, 'm' = 1, 'o' = 1))
plotly_data <- isolate(plotly_data[-1, ])
observeEvent(input$walk, {
system('python3 run_sent.py')
sentimentos <- read_csv2('sentimentos.csv')
output$tweet <- renderText(sentimentos$texto[nrow(sentimentos)])
output$nota <- renderText(paste('Polaridade:', as.character(sentimentos$nota[nrow(sentimentos)])))
ruim <- -input$ruim
nota <- ruim + input$bom
if(!is.na(sentimentos$nota)) nota <- nota + sum(as.numeric(sentimentos$nota))
if(nota == 0){
busIcon <- awesomeIcons(icon = 'ios-clos',
iconColor = 'black',
library = 'ion',
markerColor = 'blue')
}
if(nota < 0) {
busIcon <- awesomeIcons(icon = 'ios-clos',
iconColor = 'black',
library = 'ion',
markerColor = 'red')
}
if(nota > 0){
busIcon <- awesomeIcons(icon = 'ios-clos',
iconColor = 'black',
library = 'ion',
markerColor = 'green')
}
system('python3 SMTU.py')
coord <- read_csv(file = 'live_pos.csv')
m <- leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng = coord$lng[1],
lat = coord$lat[1],
icon = busIcon)
output$map <- renderLeaflet(m)
if(input$rec != ''){
cloud <<- append(cloud, input$rec)
}
cloud <<- append(cloud, sentimentos$texto)
auxCorpus <- Corpus(VectorSource(cloud))
auxCorpus <- tm_map(auxCorpus, removePunctuation)
auxCorpus <- tm_map(auxCorpus, removeWords, stopwords('pt'))
auxCorpus <- tm_map(auxCorpus, removeWords, c('onibus', 'ônibus', 'Ônibus', 'emtu'))
auxCorpus <- tm_map(auxCorpus, stemDocument)
output$wordcloud <- renderPlot({
wordcloud(auxCorpus, max.words=50, colors = c("blue", "red"), min.freq = 1)
})
output$date <- renderText(paste('Data:',
paste(day(Sys.time()),
month(Sys.time()),
year(Sys.time()),
sep = '/'),
'Hora:',
hour(Sys.time())))
plotly_data <<- as.data.frame(rbind(plotly_data, c(minute(Sys.time()), input$ruim, input$bom, nota)))
colnames(plotly_data) <- c('time', 'nota_ruim', 'nota_boa', 'total')
output$plotly <- renderPlotly({
plotly_data %>% ggplot(aes(x = time)) +
geom_line(aes(y = nota_ruim), color = 'red') +
geom_line(aes(y = nota_boa), color = 'green') +
geom_line(aes(y = total), color = 'blue') +
labs(x = 'Tempo', y = 'Nota', title = 'Notas por minuto')
})
})
output$image <- renderImage({
req(input$img)
setwd("./darknet")
system(paste('./darknet detect cfg/yolov3.cfg yolov3.weights', input$img$datapath))
setwd("..")
list(src = "darknet/predictions.png", width = 380)
})
}
shinyApp(ui, server)
urll <- 'http://www.amazon.com/Key-Industries-Washed-Denim-Sleeve/product-reviews/B009URT88Y/ref=dp_top_cm_cr_acr_txt?showViewpoints=1'
library(XML)
doc <- htmlParse(urll)
xpathSApply(doc,'//div[@class="reviewText"]',xmlValue)
library(readr)
library(lubridate)
library(geosphere)
setwd("/Users/julianadaikawa/Downloads/all/")
train = read_csv("train.zip")
test = read_csv("test.zip")
train$Month <- month(train$pickup_datetime)
train$Day <- day(train$pickup_datetime)
train$Hour <- hour(train$pickup_datetime)
train$Minute <- minute(train$pickup_datetime)
train$Weekday <- weekdays(train$pickup_datetime)
# Distance <- distm(train[,c("pickup_longitude", "pickup_latitude")], train[,c("dropoff_longitude", "dropoff_latitude")], fun = distHaversine)
# Distance <- as.matrix(Distance)
# train$Distance <- Distance[row(Distance) == col(Distance)] # aborta sessão R
for(i in 1:nrow(train)) {
print(i)
train$Distance[i] <- distm(train[i,c("pickup_longitude", "pickup_latitude")], train[i,c("dropoff_longitude", "dropoff_latitude")], fun = distHaversine)
}
head(train)
for(i in 1:nrow(train)) {
print(i)
train$Distance[i] <- distm(train[i,c("pickup_longitude", "pickup_latitude")], train[i,c("dropoff_longitude", "dropoff_latitude")], fun = distHaversine)
}
head(train)
for(i in 1:nrow(train)) {
print(i)
train$Distance[i] <- distm(train[i,c("pickup_longitude", "pickup_latitude")], train[i,c("dropoff_longitude", "dropoff_latitude")], fun = distHaversine)
}
sum(is.na(train$Distance))
train$Distance[10000000]
train$Distance[100000]
train$Distance[1000000]
train$Distance[10000000]
train$Distance[4000000]
train$Distance[1458644]
tail(train)
tail(train$Distance)
distance <- train$Distance
save(distance, file = "distances_ate_122428")
rm(distance)
load("distances_ate_122428")
getwd()
setwd("/Users/julianadaikawa/Desktop/Taxi-Kaeggle/")
save(distance, file = "distances_ate_122428")
getwd()
library(readr)
library(lubridate)
library(geosphere)
setwd("/Users/julianadaikawa/Downloads/all/")
train = read_csv("train.zip")
test = read_csv("test.zip")
train = read_csv("train.zip")
test = read_csv("test.zip")
train = read_csv("train.zip")
test = read_csv("test.zip")
train$Month <- month(train$pickup_datetime)
train$Day <- day(train$pickup_datetime)
train$Hour <- hour(train$pickup_datetime)
train$Minute <- minute(train$pickup_datetime)
train$Weekday <- weekdays(train$pickup_datetime)
install.packages("fields")
library(fields)
rdist(train[1,c("pickup_longitude", "pickup_latitude")], train[1,c("dropoff_longitude", "dropoff_latitude")])
rdist(train[c(1,2),c("pickup_longitude", "pickup_latitude")], train[c(1,2),c("dropoff_longitude", "dropoff_latitude")])
distm(train[c(1,2),c("pickup_longitude", "pickup_latitude")], train[c(1,2),c("dropoff_longitude", "dropoff_latitude")])
rdist(train[c(1,2,3,4),c("pickup_longitude", "pickup_latitude")], train[c(1,2,3,4),c("dropoff_longitude", "dropoff_latitude")])
distm(train[c(1,2,3,4),c("pickup_longitude", "pickup_latitude")], train[c(1,2,3,4),c("dropoff_longitude", "dropoff_latitude")])
for(i in 1:nrow(train)) {
print(i)
train$Distance[i] <- rdist(train[i,c("pickup_longitude", "pickup_latitude")], train[i,c("dropoff_longitude", "dropoff_latitude")])
}
library(readr)
library(lubridate)
library(geosphere)
train = read_csv("train.zip")
test = read_csv("test.zip")
load("distances_ate_122428")
train$Distance <- NA
View(train)
train$Distance <- distance
head(train)
load("distances_ate_122428")
train$Distance <- NA
train$Distance <- distance
head(train)
tail(train)
train$Month <- month(train$pickup_datetime)
train$Day <- day(train$pickup_datetime)
train$Hour <- hour(train$pickup_datetime)
train$Minute <- minute(train$pickup_datetime)
train$Weekday <- weekdays(train$pickup_datetime)
train$Distance[122428]
train$Distance[122427]
train$Distance[122428]
train$Distance[122429]
# Distance <- distm(train[,c("pickup_longitude", "pickup_latitude")], train[,c("dropoff_longitude", "dropoff_latitude")], fun = distHaversine)
# Distance <- as.matrix(Distance)
# train$Distance <- Distance[row(Distance) == col(Distance)] # aborta sessão R
for(i in 122428:nrow(train)) {
train$Distance[i] <- distm(train[i,c("pickup_longitude", "pickup_latitude")], train[i,c("dropoff_longitude", "dropoff_latitude")], fun = distHaversine)
}
train$Distance[122429]
train$Distance[122440]
train$Distance[122444]
train$Distance[1224460]
train$Distance[122446]
for(i in 122428:nrow(train)) {
print(i)
train$Distance[i] <- distm(train[i,c("pickup_longitude", "pickup_latitude")], train[i,c("dropoff_longitude", "dropoff_latitude")], fun = distHaversine)
}
summary(train$Distance)
which.min(train$Distance)
train[247,]
sem <- train[247,]
View(sem)
rm(sem)
test$Distance <- NA
View(test)
for(i in 1:nrow(test)) {
print(i)
test$Distance[i] <- distm(test[i,c("pickup_longitude", "pickup_latitude")], test[i,c("dropoff_longitude", "dropoff_latitude")], fun = distHaversine)
}
save(test, file = "test")
save(train, file = "train")
head(train)
head(test)
test$Hour <- hour(test$pickup_datetime)
test$Month <- month(test$pickup_datetime)
test$Day <- day(test$pickup_datetime)
test$Hour <- hour(test$pickup_datetime)
test$Minute <- minute(test$pickup_datetime)
test$Weekday <- weekdays(test$pickup_datetime)
save(test, file = "test")
# train = read_csv("train.zip")
# test = read_csv("test.zip")
load("train")
load("test")
names(train)
names(test)
head(train)
formula <- trip_duration ~ Month +
Day +
Hour +
Minute +
Weekday +
vendor_id +
passenger_count +
pickup_longitude +
pickup_latitude +
dropoff_longitude +
dropoff_latitude +
store_and_fwd_flag
names(train)
formula <- trip_duration ~ Month +
Day +
Hour +
Minute +
Weekday +
vendor_id +
passenger_count +
store_and_fwd_flag +
Distance
str(train)
str(train)
str(train)
unique(train$id)
unique(train$vendor_id)
unique(train$passenger_count)
unique(train$store_and_fwd_flag)
str(train)
# Arrumando str
train$vendor_id <- as.factor(train$vendor_id)
train$passenger_count <- as.factor(train$passenger_count)
train$store_and_fwd_flag <- as.factor(train$store_and_fwd_flag)
train$Weekday <- as.factor(train$Weekday)
formula <- trip_duration ~ Month +
Day +
Hour +
Minute +
Weekday +
vendor_id +
passenger_count +
store_and_fwd_flag +
Distance
lm <- lm(formula, train)
lm <- lm(formula, train)
summary(lm)
pred <- predict(lm, test)
test$vendor_id <- as.factor(test$vendor_id)
test$passenger_count <- as.factor(test$passenger_count)
test$store_and_fwd_flag <- as.factor(test$store_and_fwd_flag)
test$Weekday <- as.factor(test$Weekday)
pred <- predict(lm, test)
pred <- predict(lm, test)
pred
?data.frame
pred <- predict(lm, test)
submission <- data.frame(c("id"), "trip_duration")
submission$id <- test$id
View(submission)
pred <- predict(lm, test)
submission <- data.frame(row.names = c("id"), "trip_duration")
submission$id <- test$id
View(submission)
pred <- predict(lm, test)
submission <- data.frame(col.names = c("id"), "trip_duration")
submission$id <- test$id
View(submission)
pred <- predict(lm, test)
submission <- data.frame(625134, 2, col.names = c("id"), "trip_duration")
submission$id <- test$id
View(submission)
submission <- data.frame("id" = c(), "trip_duration" = c())
submission$id <- test$id
submission <- data.frame()
submission$id <- test$id
submission <- data.frame(id = character(), trip_duration = numeric())
View(submission)
pred <- predict(lm, test)
submission <- data.frame(id = character(), trip_duration = numeric())
submission$id <- test$id
pred <- predict(lm, test)
submission <- c()
submission$id <- test$id
submission$trip_duration <- pred
head(submission)
pred <- predict(lm, test)
submission <- c()
submission$id <- test$id
submission$trip_duration <- pred\
submission
submission[,2]
submission[2]
submission[[]]
submission[[1]]
submission[[2]]
pred <- predict(lm, test)
submission <- c()
submission$id <- test$id
submission$trip_duration <- pred
submission <- as.data.frame(submission)
head(submission)
write.csv(submission, file = "submission.csv")
write.csv(submission, file = "submission.csv", row.names = FALSE)
library(MASS)
step <- stepAIC(lm)
step$terms
formula_step <- trip_duration ~ Month + Hour + Minute + Weekday + vendor_id +
Distance
lm_step <- lm(formula_step, train)
summary(lm_step)
pred <- predict(lm_step, test)
submission <- c()
submission$id <- test$id
submission$trip_duration <- pred
submission <- as.data.frame(submission)
head(submission)
write.csv(submission, file = "submission2.csv", row.names = FALSE, quote = FALSE) # Score: 0.68645 Rank: #1070
install.packages("MLmetrics")
library(MLmetrics)
pred <- predict(lm_step, train)
RMSLE(pred, train$trip_duration)
pred <- predict(lm, train)
RMSLE(pred, train$trip_duration)
pred <- predict(lm, train)
RMSLE(pred, train$trip_duration)
summary(pred)
pred <- predict(lm_step, train)
RMSLE(pred, train$trip_duration)
summary(pred)
summary(train$Distance)
summary(test$Distance)
boxplot(train$Distance)
?boxplot
library(ggplot2)
ggplot(train, aes(passenger_count, Distance)) + geom_boxplot()
str(train$passenger_count)
ggplot(train, aes(passenger_count, Distance)) + geom_boxplot()
unique(train$passenger_count)
ggplot(train, aes(passenger_count, Distance)) + geom_boxplot() + ylim(c(0:1000))
?ylim
ggplot(train, aes(passenger_count, Distance)) + geom_boxplot() + ylim(c(0,1000))
sum(train$passenger_count==8)
sum(train$passenger_count==9)
sum(train$passenger_count==6)
summary(train$passenger_count)
ggplot(train, aes(passenger_count, Distance)) + geom_boxplot() + ylim(c(0,1000))
summary(train$passenger_count)
ggplot(train, aes(passenger_count, Distance)) + geom_boxplot() + ylim(c(0,1000)) # Desconsiderar níveis 0, 7, 8 e 9
train$passenger_count_2 <- ifelse(train$passenger_count>6, 6, train$passenger_count)
test$passenger_count_2 <- ifelse(test$passenger_count>6, 6, test$passenger_count)
summary(train$passenger_count)
ggplot(train, aes(passenger_count, Distance)) + geom_boxplot() + ylim(c(0,1000)) # Desconsiderar níveis 0, 7, 8 e 9
train$passenger_count_2 <- ifelse(train$passenger_count>6, 6, train$passenger_count)
test$passenger_count_2 <- ifelse(test$passenger_count>6, 6, test$passenger_count)
summary(train$passenger_count_2)
train$passenger_count_2 <- as.factor(train$passenger_count_2)
test$passenger_count_2 <- as.factor(test$passenger_count_2)
summary(train$passenger_count)
ggplot(train, aes(passenger_count, Distance)) + geom_boxplot() + ylim(c(0,1000)) # Desconsiderar níveis 0, 7, 8 e 9
train$passenger_count_2 <- ifelse(train$passenger_count>6, 6, train$passenger_count)
test$passenger_count_2 <- ifelse(test$passenger_count>6, 6, test$passenger_count)
train$passenger_count_2 <- as.factor(train$passenger_count_2)
test$passenger_count_2 <- as.factor(test$passenger_count_2)
summary(train$passenger_count_2)
head(train)
summary(train$passenger_count)
ggplot(train, aes(passenger_count, Distance)) + geom_boxplot() + ylim(c(0,1000)) # Desconsiderar níveis 0, 7, 8 e 9
train$passenger_count_2 <- ifelse(as.numeric(train$passenger_count)>6, 6, train$passenger_count)
test$passenger_count_2 <- ifelse(as.numeric(test$passenger_count)>6, 6, test$passenger_count)
train$passenger_count_2 <- as.factor(train$passenger_count_2)
test$passenger_count_2 <- as.factor(test$passenger_count_2)
summary(train$passenger_count_2)
formula <- trip_duration ~ Month +
Day +
Hour +
Minute +
Weekday +
vendor_id +
#passenger_count +
passenger_count_2 +
store_and_fwd_flag +
Distance
lm <- lm(formula, train)
summary(lm)
pred <- predict(lm_step, train)
RMSLE(pred, train$trip_duration)
pred <- predict(lm, train)
RMSLE(pred, train$trip_duration)
formula <- trip_duration ~ Month +
Day +
Hour +
#Minute +
Weekday +
vendor_id +
#passenger_count +
passenger_count_2 +
store_and_fwd_flag +
Distance
lm <- lm(formula, train)
summary(lm)
pred <- predict(lm, train)
RMSLE(pred, train$trip_duration)
formula <- trip_duration ~ Month +
#Day +
Hour +
#Minute +
Weekday +
vendor_id +
#passenger_count +
passenger_count_2 +
store_and_fwd_flag +
Distance
lm <- lm(formula, train)
summary(lm)
pred <- predict(lm, train)
RMSLE(pred, train$trip_duration)
formula <- trip_duration ~ Month +
Day +
Hour +
#Minute +
Weekday +
vendor_id +
#passenger_count +
passenger_count_2 +
store_and_fwd_flag +
Distance
lm <- lm(formula, train)
summary(lm)
library(rpart)
rpart(formula, train)
install.packages("rattle")
library(rattle)
install.packages("rattle")
library(rattle)
library(rattle)
rpart <- rpart(formula, train)
pred <- predict(rpart, train)
RMSLE(pred, train$trip_duration)
